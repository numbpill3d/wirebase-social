{{!< layouts/main}}

<div class="forum-container">
  <!-- Sidebar Navigation -->
  <div class="forum-sidebar">
    <div class="forum-sidebar-item">
      <a href="/forum" class="forum-sidebar-link">
        <i class="fas fa-home"></i>
      </a>
      <span class="forum-sidebar-text">Forum Home</span>
    </div>
    <div class="forum-sidebar-item">
      <a href="/forum/category/general" class="forum-sidebar-link">
        <i class="fas fa-comments"></i>
      </a>
      <span class="forum-sidebar-text">General</span>
    </div>
    <div class="forum-sidebar-item">
      <a href="/forum/category/tech" class="forum-sidebar-link">
        <i class="fas fa-code"></i>
      </a>
      <span class="forum-sidebar-text">Tech</span>
    </div>
    <div class="forum-sidebar-item">
      <a href="/forum/category/creative" class="forum-sidebar-link">
        <i class="fas fa-palette"></i>
      </a>
      <span class="forum-sidebar-text">Creative</span>
    </div>
    <div class="forum-sidebar-item">
      <a href="/forum/category/meta" class="forum-sidebar-link">
        <i class="fas fa-cog"></i>
      </a>
      <span class="forum-sidebar-text">Meta</span>
    </div>
    <div class="forum-sidebar-item">
      <a href="/forum/new" class="forum-sidebar-link active">
        <i class="fas fa-plus"></i>
      </a>
      <span class="forum-sidebar-text">New Thread</span>
    </div>
  </div>

  <div class="forum-header">
    <h1 class="cyber-header glitch-text" data-text="Create New Thread">Create New Thread</h1>

    <!-- Improved Breadcrumbs -->
    <div class="breadcrumbs">
      <a href="/forum">Assembly</a>
      <span class="separator">Â»</span>
      <span>New Thread</span>
    </div>
  </div>

  <div class="new-thread-form cyber-window">
    <div class="cyber-window-header">
      <span class="cyber-window-title">New Thread</span>
    </div>
    <div class="cyber-window-content">
      {{#if errors}}
        <div class="error-container">
          <ul class="error-list">
            {{#each errors}}
              <li>{{this.msg}}</li>
            {{/each}}
          </ul>
        </div>
      {{/if}}

      <form action="/forum/new" method="POST" id="new-thread-form">
        <input type="hidden" name="_csrf" value="{{csrfToken}}">
        <div class="form-group">
          <label for="title">Thread Title</label>
          <input type="text" id="title" name="title" class="cyber-input" value="{{formData.title}}" required maxlength="100">
          <div class="character-counter" id="title-counter">0/100 characters</div>
        </div>

        <div class="form-group">
          <label for="category">Category</label>
          <select id="category" name="category" class="cyber-select" required>
            <option value="" disabled {{#unless formData.category}}selected{{/unless}}>Select a category</option>
            <option value="general" {{#if (eq formData.category "general")}}selected{{/if}}>General</option>
            <option value="tech" {{#if (eq formData.category "tech")}}selected{{/if}}>Tech</option>
            <option value="creative" {{#if (eq formData.category "creative")}}selected{{/if}}>Creative</option>
            <option value="meta" {{#if (eq formData.category "meta")}}selected{{/if}}>Meta</option>
          </select>
        </div>

        <div class="form-group">
          <label for="content">Content</label>
          <!-- WYSIWYG Editor -->
          <div class="wysiwyg-editor">
            <div class="wysiwyg-toolbar">
              <button type="button" class="wysiwyg-button" data-command="bold" title="Bold">
                <i class="fas fa-bold"></i>
              </button>
              <button type="button" class="wysiwyg-button" data-command="italic" title="Italic">
                <i class="fas fa-italic"></i>
              </button>
              <button type="button" class="wysiwyg-button" data-command="link" title="Link">
                <i class="fas fa-link"></i>
              </button>
              <button type="button" class="wysiwyg-button" data-command="code" title="Code">
                <i class="fas fa-code"></i>
              </button>
              <button type="button" class="wysiwyg-button" data-command="quote" title="Quote">
                <i class="fas fa-quote-right"></i>
              </button>
              <button type="button" class="wysiwyg-button" data-command="list-ul" title="Bullet List">
                <i class="fas fa-list-ul"></i>
              </button>
              <button type="button" class="wysiwyg-button" data-command="list-ol" title="Numbered List">
                <i class="fas fa-list-ol"></i>
              </button>
            </div>
            <div class="wysiwyg-content" contenteditable="true" id="thread-content">{{formData.content}}</div>
            <textarea id="content" name="content" style="display: none;">{{formData.content}}</textarea>
          </div>
          <div class="character-counter" id="content-counter">0/5000 characters</div>
          <div class="input-help">
            <span class="formatting-help-toggle">Formatting Help</span>
            <div class="formatting-help">
              <p>You can use basic formatting:</p>
              <ul>
                <li><code>**bold**</code> for <strong>bold text</strong></li>
                <li><code>*italic*</code> for <em>italic text</em></li>
                <li><code>[link text](url)</code> for <a href="#">links</a></li>
                <li><code>- item</code> for bullet lists</li>
                <li><code>1. item</code> for numbered lists</li>
                <li><code>```code```</code> for code blocks</li>
              </ul>
            </div>
          </div>
        </div>

        <div class="form-group">
          <label for="tags">Tags (optional)</label>
          <div class="tags-input-container">
            <input type="text" id="tag-input" class="cyber-input" placeholder="Add a tag...">
            <button type="button" id="add-tag-btn" class="cyber-button">Add</button>
          </div>
          <div class="tags-container" id="tags-container"></div>
          <input type="hidden" id="tags" name="tags" value="{{formData.tags}}">
          <div class="input-help">Add up to 5 tags to help categorize your thread. Press Enter or click Add after each tag.</div>
        </div>

        <div class="form-actions">
          <a href="/forum" class="cyber-button secondary">Cancel</a>
          <button type="submit" class="cyber-button">Create Thread</button>
        </div>
      </form>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Initialize glitch effect on headers
    const headers = document.querySelectorAll('.glitch-text');
    headers.forEach(header => {
      const text = header.textContent;
      header.setAttribute('data-text', text);
    });

    // Show/hide formatting help
    const formattingToggle = document.querySelector('.formatting-help-toggle');
    const formattingHelp = document.querySelector('.formatting-help');

    if (formattingToggle && formattingHelp) {
      formattingToggle.addEventListener('click', function() {
        formattingHelp.style.display = formattingHelp.style.display === 'block' ? 'none' : 'block';
      });
    }

    // Pre-select category from query parameter if available
    const urlParams = new URLSearchParams(window.location.search);
    const categoryParam = urlParams.get('category');

    if (categoryParam) {
      const categorySelect = document.getElementById('category');
      const option = Array.from(categorySelect.options).find(opt => opt.value === categoryParam);

      if (option) {
        option.selected = true;
      }
    }

    // Character counters
    const titleInput = document.getElementById('title');
    const titleCounter = document.getElementById('title-counter');
    const contentEditor = document.getElementById('thread-content');
    const contentCounter = document.getElementById('content-counter');
    const contentTextarea = document.getElementById('content');

    if (titleInput && titleCounter) {
      titleInput.addEventListener('input', function() {
        const count = this.value.length;
        const max = 100;
        titleCounter.textContent = `${count}/${max} characters`;

        if (count > max * 0.95) {
          titleCounter.className = 'character-counter danger';
        } else if (count > max * 0.8) {
          titleCounter.className = 'character-counter warning';
        } else {
          titleCounter.className = 'character-counter';
        }
      });

      // Initialize counter
      titleInput.dispatchEvent(new Event('input'));
    }

    if (contentEditor && contentCounter && contentTextarea) {
      contentEditor.addEventListener('input', function() {
        const count = this.textContent.length;
        const max = 5000;
        contentCounter.textContent = `${count}/${max} characters`;

        // Update hidden textarea
        contentTextarea.value = this.innerHTML;

        if (count > max * 0.95) {
          contentCounter.className = 'character-counter danger';
        } else if (count > max * 0.8) {
          contentCounter.className = 'character-counter warning';
        } else {
          contentCounter.className = 'character-counter';
        }
      });

      // Initialize counter
      contentEditor.dispatchEvent(new Event('input'));
    }

    // WYSIWYG Editor functionality
    const buttons = document.querySelectorAll('.wysiwyg-button');

    if (buttons.length > 0 && contentEditor) {
      buttons.forEach(button => {
        button.addEventListener('click', function() {
          const command = this.getAttribute('data-command');

          try {
            switch(command) {
              case 'bold':
                document.execCommand('bold', false, null);
                break;
              case 'italic':
                document.execCommand('italic', false, null);
                break;
              case 'link':
                const url = prompt('Enter the URL:');
                if (url) {
                  document.execCommand('createLink', false, url);
                }
                break;
              case 'code':
                const selection = window.getSelection();
                if (selection && selection.toString().length > 0) {
                  try {
                    const range = selection.getRangeAt(0);
                    const codeElement = document.createElement('code');
                    codeElement.textContent = selection.toString();
                    range.deleteContents();
                    range.insertNode(codeElement);
                  } catch (selectionError) {
                    console.error('Selection error:', selectionError);
                    document.execCommand('insertHTML', false, '<code>code here</code>');
                  }
                } else {
                  document.execCommand('insertHTML', false, '<code>code here</code>');
                }
                break;
              case 'quote':
                document.execCommand('insertHTML', false, '<blockquote>quote here</blockquote>');
                break;
              case 'list-ul':
                document.execCommand('insertUnorderedList', false, null);
                break;
              case 'list-ol':
                document.execCommand('insertOrderedList', false, null);
                break;
            }
          } catch (editorError) {
            console.error('WYSIWYG editor error:', editorError);
            alert('An error occurred while formatting. Please try again.');
          }

          // Update content and counter
          contentEditor.dispatchEvent(new Event('input'));
        });
      });
    }

    // Tags functionality
    const tagInput = document.getElementById('tag-input');
    const addTagBtn = document.getElementById('add-tag-btn');
    const tagsContainer = document.getElementById('tags-container');
    const tagsHiddenInput = document.getElementById('tags');

    if (tagInput && addTagBtn && tagsContainer && tagsHiddenInput) {
      const tags = [];
      const MAX_TAGS = 5;

      // Initialize tags from hidden input if there are any
      if (tagsHiddenInput.value) {
        const initialTags = tagsHiddenInput.value.split(',').map(tag => tag.trim());
        initialTags.forEach(tag => {
          if (tag && tags.length < MAX_TAGS) {
            addTag(tag);
          }
        });
      }

      // Add tag function
      function addTag(tagText) {
        if (tagText && !tags.includes(tagText) && tags.length < MAX_TAGS) {
          tags.push(tagText);

          // Create tag element
          const tagElement = document.createElement('div');
          tagElement.className = 'tag-item';
          tagElement.innerHTML = `
            <span class="tag-text">${tagText}</span>
            <button type="button" class="tag-remove" data-tag="${tagText}">&times;</button>
          `;

          // Add to container
          tagsContainer.appendChild(tagElement);

          // Update hidden input
          tagsHiddenInput.value = tags.join(',');

          // Clear input
          tagInput.value = '';

          // Add remove event listener
          const removeBtn = tagElement.querySelector('.tag-remove');
          removeBtn.addEventListener('click', function() {
            const tagToRemove = this.getAttribute('data-tag');
            removeTag(tagToRemove, tagElement);
          });
        }
      }

      // Remove tag function
      function removeTag(tagText, element) {
        const index = tags.indexOf(tagText);
        if (index !== -1) {
          tags.splice(index, 1);
          tagsContainer.removeChild(element);
          tagsHiddenInput.value = tags.join(',');
        }
      }

      // Add tag on button click
      addTagBtn.addEventListener('click', function() {
        const tagText = tagInput.value.trim();
        if (tagText) {
          addTag(tagText);
        }
      });

      // Add tag on Enter key
      tagInput.addEventListener('keydown', function(e) {
        if (e.key === 'Enter') {
          e.preventDefault();
          const tagText = this.value.trim();
          if (tagText) {
            addTag(tagText);
          }
        }
      });
    }

    // Form submission
    const form = document.getElementById('new-thread-form');
    if (form) {
      form.addEventListener('submit', function(e) {
        // Make sure the content textarea is updated with the editor content
        if (contentEditor && contentTextarea) {
          contentTextarea.value = contentEditor.innerHTML;
        }
      });
    }
  });
</script>
