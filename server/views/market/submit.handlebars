<div class="vivid-market submit-page">
  <div class="breadcrumb">
    <a href="/market">Vivid Market</a> &gt; 
    <span>Submit Item</span>
  </div>

  <div class="submit-container">
    <div class="submit-header">
      <h1>Submit to Vivid Market</h1>
      <p class="submit-description">Share your digital assets with the community. Upload templates, icons, code snippets, and more to earn WIR.</p>
    </div>

    <form id="submit-form" class="submit-form">
      <input type="hidden" name="_csrf" value="{{csrfToken}}">
      <div class="form-section">
        <h2>Basic Information</h2>
        
        <div class="form-group">
          <label for="title">Title <span class="required">*</span></label>
          <input type="text" id="title" name="title" required maxlength="100">
          <div class="character-count"><span id="title-count">0</span>/100</div>
        </div>
        
        <div class="form-group">
          <label for="description">Description <span class="required">*</span></label>
          <textarea id="description" name="description" required rows="5" maxlength="1000"></textarea>
          <div class="character-count"><span id="description-count">0</span>/1000</div>
          <div class="form-hint">Markdown formatting supported</div>
        </div>
        
        <div class="form-group">
          <label for="category">Category <span class="required">*</span></label>
          <select id="category" name="category" required>
            <option value="" disabled selected>Select a category</option>
            {{#each categories}}
              <option value="{{this.value}}">{{this.label}}</option>
            {{/each}}
          </select>
        </div>
        
        <div class="form-group">
          <label for="tags">Tags</label>
          <input type="text" id="tags" name="tags" placeholder="Separate tags with commas">
          <div class="form-hint">Add relevant tags to help others find your item</div>
        </div>
      </div>
      
      <div class="form-section">
        <h2>Content</h2>
        
        <div class="form-group content-type-group">
          <label>Content Type <span class="required">*</span></label>
          <div class="content-type-options">
            <div class="content-type-option">
              <input type="radio" id="content-type-file" name="contentType" value="file" checked>
              <label for="content-type-file">Upload File</label>
            </div>
            <div class="content-type-option">
              <input type="radio" id="content-type-text" name="contentType" value="text">
              <label for="content-type-text">Text/Code</label>
            </div>
            <div class="content-type-option">
              <input type="radio" id="content-type-url" name="contentType" value="url">
              <label for="content-type-url">External URL</label>
            </div>
          </div>
        </div>
        
        <div id="content-file" class="content-input">
          <div class="form-group">
            <label for="content-file-input">Upload File <span class="required">*</span></label>
            <div class="file-upload-container">
              <input type="file" id="content-file-input" name="contentFile">
              <div class="file-upload-button">Choose File</div>
              <div class="file-name">No file chosen</div>
            </div>
            <div class="form-hint">Supported formats: HTML, CSS, JS, PNG, GIF, JPG, SVG, ZIP, TXT, MP3, WAV</div>
          </div>
        </div>
        
        <div id="content-text" class="content-input" style="display: none;">
          <div class="form-group">
            <label for="content-text-input">Text/Code Content <span class="required">*</span></label>
            <textarea id="content-text-input" name="contentText" rows="10"></textarea>
          </div>
        </div>
        
        <div id="content-url" class="content-input" style="display: none;">
          <div class="form-group">
            <label for="content-url-input">External URL <span class="required">*</span></label>
            <input type="url" id="content-url-input" name="contentUrl" placeholder="https://">
            <div class="form-hint">Link to external resource (image, audio, etc.)</div>
          </div>
        </div>
        
        <div class="form-group">
          <label for="preview-image">Preview Image</label>
          <div class="file-upload-container">
            <input type="file" id="preview-image" name="previewImage" accept="image/*">
            <div class="file-upload-button">Choose Image</div>
            <div class="preview-image-name">No image chosen</div>
          </div>
          <div class="form-hint">Recommended size: 500x500px. If not provided, a default preview will be used.</div>
        </div>
        
        <div id="preview-image-container" class="preview-image-container" style="display: none;">
          <img id="preview-image-preview" src="" alt="Preview">
          <button type="button" id="remove-preview-image" class="remove-preview-button">Remove</button>
        </div>
      </div>
      
      <div class="form-section">
        <h2>Marketplace Settings</h2>
        
        <div class="form-group">
          <label for="wir-price">WIR Price</label>
          <input type="number" id="wir-price" name="wirPrice" min="0" value="0">
          <div class="form-hint">Set to 0 for free items. Note: Listing fee of 1 WIR applies for priced items.</div>
        </div>
        
        <div class="form-group">
          <div class="checkbox-group">
            <input type="checkbox" id="featured-request" name="featuredRequest">
            <label for="featured-request">Request featured status (costs 5 WIR)</label>
          </div>
        </div>
        
        <div class="form-group">
          <label for="add-to-collection">Add to Collection (Optional)</label>
          <select id="add-to-collection" name="collectionId">
            <option value="">None</option>
            {{#if user.collections.length}}
              {{#each user.collections}}
                <option value="{{this.id}}">{{this.name}}</option>
              {{/each}}
            {{/if}}
            <option value="new">+ Create New Collection</option>
          </select>
        </div>
      </div>
      
      <div class="form-section submission-section">
        <div class="submission-info">
          <div class="wir-balance-info">
            <span>Your WIR Balance:</span>
            <span class="wir-balance">{{user.wirBalance}} WIR</span>
          </div>
          
          <div class="submission-costs">
            <div class="cost-item">
              <span>Item Price:</span>
              <span id="item-price-display">0 WIR</span>
            </div>
            <div class="cost-item listing-fee">
              <span>Listing Fee:</span>
              <span id="listing-fee-display">0 WIR</span>
            </div>
            <div class="cost-item featured-fee" style="display: none;">
              <span>Featured Fee:</span>
              <span>5 WIR</span>
            </div>
            <div class="cost-divider"></div>
            <div class="cost-item total-cost">
              <span>Total Cost:</span>
              <span id="total-cost-display">0 WIR</span>
            </div>
          </div>
        </div>
        
        <div class="submission-actions">
          <button type="button" id="cancel-button" class="cancel-button">Cancel</button>
          <button type="submit" id="submit-button" class="submit-button">Submit to Market</button>
        </div>
      </div>
    </form>
  </div>
</div>

<!-- New Collection Modal -->
<div id="new-collection-modal" class="modal">
  <div class="modal-content">
    <span class="close-modal">&times;</span>
    <h2>Create New Collection</h2>
  <form id="create-collection-form">
    <input type="hidden" name="_csrf" value="{{csrfToken}}">
    <div class="form-group">
        <label for="collection-name">Collection Name <span class="required">*</span></label>
        <input type="text" id="collection-name" name="name" required>
      </div>
      <div class="form-group">
        <label for="collection-description">Description</label>
        <textarea id="collection-description" name="description"></textarea>
      </div>
      <div class="form-group">
        <div class="checkbox-group">
          <input type="checkbox" id="collection-public" name="isPublic" checked>
          <label for="collection-public">Make collection public</label>
        </div>
      </div>
      <button type="submit" class="submit-button">Create Collection</button>
    </form>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Character counters
    const titleInput = document.getElementById('title');
    const titleCount = document.getElementById('title-count');
    const descriptionInput = document.getElementById('description');
    const descriptionCount = document.getElementById('description-count');
    
    titleInput.addEventListener('input', function() {
      titleCount.textContent = this.value.length;
    });
    
    descriptionInput.addEventListener('input', function() {
      descriptionCount.textContent = this.value.length;
    });
    
    // Content type switching
    const contentTypeRadios = document.querySelectorAll('input[name="contentType"]');
    const contentInputs = document.querySelectorAll('.content-input');
    
    contentTypeRadios.forEach(radio => {
      radio.addEventListener('change', function() {
        contentInputs.forEach(input => {
          input.style.display = 'none';
        });
        document.getElementById(`content-${this.value}`).style.display = 'block';
      });
    });
    
    // File upload handling
    const contentFileInput = document.getElementById('content-file-input');
    const fileName = document.querySelector('.file-name');
    
    contentFileInput.addEventListener('change', function() {
      if (this.files.length > 0) {
        fileName.textContent = this.files[0].name;
      } else {
        fileName.textContent = 'No file chosen';
      }
    });
    
    // Preview image handling
    const previewImageInput = document.getElementById('preview-image');
    const previewImageName = document.querySelector('.preview-image-name');
    const previewImageContainer = document.getElementById('preview-image-container');
    const previewImagePreview = document.getElementById('preview-image-preview');
    const removePreviewButton = document.getElementById('remove-preview-image');
    
    previewImageInput.addEventListener('change', function() {
      if (this.files.length > 0) {
        const file = this.files[0];
        previewImageName.textContent = file.name;
        
        // Show preview
        const reader = new FileReader();
        reader.onload = function(e) {
          previewImagePreview.src = e.target.result;
          previewImageContainer.style.display = 'block';
        };
        reader.readAsDataURL(file);
      } else {
        previewImageName.textContent = 'No image chosen';
        previewImageContainer.style.display = 'none';
      }
    });
    
    removePreviewButton.addEventListener('click', function() {
      previewImageInput.value = '';
      previewImageName.textContent = 'No image chosen';
      previewImageContainer.style.display = 'none';
    });
    
    // WIR price and fees calculation
    const wirPriceInput = document.getElementById('wir-price');
    const itemPriceDisplay = document.getElementById('item-price-display');
    const listingFeeDisplay = document.getElementById('listing-fee-display');
    const totalCostDisplay = document.getElementById('total-cost-display');
    const featuredRequest = document.getElementById('featured-request');
    const featuredFee = document.querySelector('.featured-fee');
    
    function updateCosts() {
      const price = parseInt(wirPriceInput.value) || 0;
      const listingFee = price > 0 ? 1 : 0;
      const featuredFeeAmount = featuredRequest.checked ? 5 : 0;
      const totalCost = listingFee + featuredFeeAmount;
      
      itemPriceDisplay.textContent = `${price} WIR`;
      listingFeeDisplay.textContent = `${listingFee} WIR`;
      featuredFee.style.display = featuredRequest.checked ? 'flex' : 'none';
      totalCostDisplay.textContent = `${totalCost} WIR`;
      
      // Check if user has enough WIR
      const userBalance = {{user.wirBalance}};
      const submitButton = document.getElementById('submit-button');
      
      if (totalCost > userBalance) {
        submitButton.disabled = true;
        submitButton.title = 'Insufficient WIR balance';
      } else {
        submitButton.disabled = false;
        submitButton.title = '';
      }
    }
    
    wirPriceInput.addEventListener('input', updateCosts);
    featuredRequest.addEventListener('change', updateCosts);
    
    // Initialize costs
    updateCosts();
    
    // Collection dropdown handling
    const collectionSelect = document.getElementById('add-to-collection');
    const newCollectionModal = document.getElementById('new-collection-modal');
    const closeModalButton = document.querySelector('.close-modal');
    
    collectionSelect.addEventListener('change', function() {
      if (this.value === 'new') {
        newCollectionModal.style.display = 'block';
      }
    });
    
    closeModalButton.addEventListener('click', function() {
      newCollectionModal.style.display = 'none';
    });
    
    // Close modal when clicking outside
    window.addEventListener('click', function(event) {
      if (event.target === newCollectionModal) {
        newCollectionModal.style.display = 'none';
      }
    });
    
    // Create collection form handling
    const createCollectionForm = document.getElementById('create-collection-form');
    
    createCollectionForm.addEventListener('submit', function(e) {
      e.preventDefault();
      
      const formData = {
        name: document.getElementById('collection-name').value,
        description: document.getElementById('collection-description').value,
        isPublic: document.getElementById('collection-public').checked
      };
      
      fetch('/market/user/collections/create', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(formData)
      })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          // Add new option to select and select it
          const option = document.createElement('option');
          option.value = data.collectionId;
          option.textContent = formData.name;
          
          // Insert before the "Create New Collection" option
          const newOption = collectionSelect.querySelector('option[value="new"]');
          collectionSelect.insertBefore(option, newOption);
          
          // Select the new option
          collectionSelect.value = data.collectionId;
          
          // Close modal
          newCollectionModal.style.display = 'none';
          
          // Reset form
          createCollectionForm.reset();
        } else {
          alert(data.message || 'Failed to create collection');
        }
      })
      .catch(error => {
        console.error('Error:', error);
        alert('An error occurred while creating the collection');
      });
    });
    
    // Cancel button
    const cancelButton = document.getElementById('cancel-button');
    cancelButton.addEventListener('click', function() {
      if (confirm('Are you sure you want to cancel? All entered data will be lost.')) {
        window.location.href = '/market';
      }
    });
    
    // Form submission
    const submitForm = document.getElementById('submit-form');
    
    submitForm.addEventListener('submit', function(e) {
      e.preventDefault();
      
      // Validate form
      const title = document.getElementById('title').value;
      const description = document.getElementById('description').value;
      const category = document.getElementById('category').value;
      const contentType = document.querySelector('input[name="contentType"]:checked').value;
      
      if (!title || !description || !category) {
        alert('Please fill in all required fields');
        return;
      }
      
      // Validate content based on content type
      let content = '';
      if (contentType === 'file') {
        const file = document.getElementById('content-file-input').files[0];
        if (!file) {
          alert('Please upload a file');
          return;
        }
        // For file uploads, we'll handle this differently in a real implementation
        // Here we're just simulating it
        content = 'file://' + file.name;
      } else if (contentType === 'text') {
        content = document.getElementById('content-text-input').value;
        if (!content) {
          alert('Please enter text content');
          return;
        }
      } else if (contentType === 'url') {
        content = document.getElementById('content-url-input').value;
        if (!content) {
          alert('Please enter a URL');
          return;
        }
      }
      
      // Prepare form data
      const formData = {
        title,
        description,
        category,
        content,
        wirPrice: parseInt(document.getElementById('wir-price').value) || 0,
        tags: document.getElementById('tags').value,
        featuredInMarket: document.getElementById('featured-request').checked,
        collectionId: document.getElementById('add-to-collection').value === 'new' ? null : document.getElementById('add-to-collection').value
      };
      
      // In a real implementation, we would use FormData for file uploads
      // For this simulation, we'll just send the JSON data
      
      // Submit the form
      fetch('/market/submit', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(formData)
      })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          // Redirect to the new item page
          window.location.href = `/market/item/${data.itemId}`;
        } else {
          alert(data.message || 'Failed to submit item');
        }
      })
      .catch(error => {
        console.error('Error:', error);
        alert('An error occurred while submitting the item');
      });
    });
  });
</script>

<style>
  /* Vivid Market Submit Styles */
  .vivid-market.submit-page {
    font-family: "MS Sans Serif", "Pixelated MS Sans Serif", Arial, sans-serif;
    max-width: 800px;
    margin: 0 auto;
    padding: 20px;
    color: #dcdcdc;
  }
  
  /* Breadcrumb */
  .breadcrumb {
    margin-bottom: 20px;
    font-size: 0.9rem;
    color: #888;
  }
  
  .breadcrumb a {
    color: #aaa;
    text-decoration: none;
  }
  
  .breadcrumb a:hover {
    color: #ffd700;
    text-decoration: underline;
  }
  
  /* Submit Container */
  .submit-container {
    background-color: #2a2a3a;
    border: 1px solid #444;
    padding: 20px;
  }
  
  .submit-header {
    margin-bottom: 30px;
    text-align: center;
  }
  
  .submit-header h1 {
    font-size: 1.8rem;
    margin: 0 0 10px 0;
    color: #ffd700;
  }
  
  .submit-description {
    color: #aaa;
    margin: 0;
  }
  
  /* Form Sections */
  .form-section {
    margin-bottom: 30px;
    padding-bottom: 30px;
    border-bottom: 1px solid #444;
  }
  
  .form-section:last-child {
    margin-bottom: 0;
    padding-bottom: 0;
    border-bottom: none;
  }
  
  .form-section h2 {
    font-size: 1.3rem;
    color: #8a2be2;
    margin-top: 0;
    margin-bottom: 20px;
  }
  
  /* Form Groups */
  .form-group {
    margin-bottom: 20px;
  }
  
  .form-group label {
    display: block;
    margin-bottom: 5px;
    font-size: 1rem;
    color: #dcdcdc;
  }
  
  .required {
    color: #f44336;
  }
  
  .form-group input[type="text"],
  .form-group input[type="number"],
  .form-group input[type="url"],
  .form-group textarea,
  .form-group select {
    width: 100%;
    padding: 10px;
    background-color: #1a1a2e;
    border: 1px solid #444;
    color: #dcdcdc;
    font-size: 1rem;
    font-family: inherit;
  }
  
  .form-group input:focus,
  .form-group textarea:focus,
  .form-group select:focus {
    border-color: #8a2be2;
    outline: none;
  }
  
  .character-count {
    text-align: right;
    font-size: 0.8rem;
    color: #888;
    margin-top: 5px;
  }
  
  .form-hint {
    font-size: 0.8rem;
    color: #888;
    margin-top: 5px;
  }
  
  /* Checkbox Group */
  .checkbox-group {
    display: flex;
    align-items: center;
    gap: 10px;
  }
  
  .checkbox-group input[type="checkbox"] {
    margin: 0;
  }
  
  /* Content Type Options */
  .content-type-options {
    display: flex;
    gap: 20px;
    margin-bottom: 15px;
  }
  
  .content-type-option {
    display: flex;
    align-items: center;
    gap: 5px;
  }
  
  /* File Upload */
  .file-upload-container {
    display: flex;
    align-items: center;
    gap: 10px;
  }
  
  .file-upload-container input[type="file"] {
    display: none;
  }
  
  .file-upload-button {
    background-color: #1a1a2e;
    border: 1px solid #444;
    color: #dcdcdc;
    padding: 8px 15px;
    cursor: pointer;
    font-size: 0.9rem;
    transition: all 0.2s ease;
  }
  
  .file-upload-button:hover {
    background-color: #2a2a4a;
  }
  
  .file-name, .preview-image-name {
    color: #aaa;
    font-size: 0.9rem;
  }
  
  /* Preview Image */
  .preview-image-container {
    margin-top: 10px;
    position: relative;
    display: inline-block;
  }
  
  .preview-image-container img {
    max-width: 200px;
    max-height: 200px;
    border: 1px solid #444;
  }
  
  .remove-preview-button {
    position: absolute;
    top: 5px;
    right: 5px;
    background-color: rgba(0, 0, 0, 0.7);
    color: #fff;
    border: none;
    width: 24px;
    height: 24px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    font-size: 1rem;
    padding: 0;
  }
  
  /* Submission Section */
  .submission-section {
    background-color: #1a1a2e;
    padding: 20px;
    margin-top: 30px;
  }
  
  .submission-info {
    display: flex;
    justify-content: space-between;
    margin-bottom: 20px;
  }
  
  @media (max-width: 768px) {
    .submission-info {
      flex-direction: column;
      gap: 20px;
    }
  }
  
  .wir-balance-info {
    display: flex;
    flex-direction: column;
    gap: 5px;
  }
  
  .wir-balance {
    font-size: 1.5rem;
    font-weight: bold;
    color: #ffd700;
  }
  
  .submission-costs {
    background-color: #2a2a3a;
    border: 1px solid #444;
    padding: 15px;
    min-width: 200px;
  }
  
  .cost-item {
    display: flex;
    justify-content: space-between;
    margin-bottom: 5px;
  }
  
  .cost-item:last-child {
    margin-bottom: 0;
  }
  
  .listing-fee {
    color: #f44336;
  }
  
  .featured-fee {
    color: #f44336;
  }
  
  .cost-divider {
    height: 1px;
    background-color: #444;
    margin: 10px 0;
  }
  
  .total-cost {
    font-weight: bold;
    color: #ffd700;
  }
  
  .submission-actions {
    display: flex;
    justify-content: space-between;
  }
  
  .cancel-button {
    background-color: #3a3a4a;
    border: 1px solid #444;
    color: #dcdcdc;
    padding: 10px 20px;
    cursor: pointer;
    font-size: 1rem;
    transition: all 0.2s ease;
  }
  
  .cancel-button:hover {
    background-color: #4a4a5a;
  }
  
  .submit-button {
    background-color: #8a2be2;
    border: 1px solid #9d50bb;
    color: #fff;
    padding: 10px 20px;
    cursor: pointer;
    font-size: 1rem;
    font-weight: bold;
    transition: all 0.2s ease;
  }
  
  .submit-button:hover:not([disabled]) {
    background-color: #9d50bb;
  }
  
  .submit-button[disabled] {
    background-color: #5a3a6a;
    border-color: #6a4a7a;
    cursor: not-allowed;
    opacity: 0.7;
  }
  
  /* Modal Styles */
  .modal {
    display: none;
    position: fixed;
    z-index: 1000;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    overflow: auto;
    background-color: rgba(0, 0, 0, 0.7);
  }
  
  .modal-content {
    background-color: #2a2a3a;
    margin: 10% auto;
    padding: 20px;
    border: 1px solid #444;
    width: 80%;
    max-width: 500px;
    position: relative;
  }
  
  .close-modal {
    color: #aaa;
    float: right;
    font-size: 28px;
    font-weight: bold;
    cursor: pointer;
  }
  
  .close-modal:hover {
    color: #fff;
  }
</style>